{"version":3,"sources":["logo.svg","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","class","alt","name","src","image","position","number","height","school","App","useState","search","setSearch","haikyuu","allCharacters","results","setResults","filter","setFilter","setSchool","filterByTag","e","target","id","useEffect","searchResults","character","toLowerCase","includes","filterResults","schoolResults","onChange","value","type","placeholder","map","onClick","length","key","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db5acb58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Card(props) {\n    return (\n        <div className=\"box\">\n            <figure class=\"card-image is-1by1\">\n                <img alt={props.name} src={props.image} />\n            </figure>\n            <div className=\"content\">\n                <ul>\n                    <li>\n                        <strong>Name:</strong> {props.name}\n                    </li>\n                    <li>\n                        <strong>Position:</strong> {props.position}\n                    </li>\n                    <li>\n                        <strong>Number:</strong> {props.number}\n                    </li>\n                    <li>\n                        <strong>Height:</strong> {props.height} cm\n                    </li>\n                    <li>\n                        <strong>School:</strong> {props.school}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport haikyuu from \"./haikyuu.json\";\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport Card from './components/Card';\nimport SearchForm from './components/SearchForm';\n\nfunction App() {\n  \n  const [search, setSearch] = useState(\"\");\n  const [allCharacters, setCharacter] = useState(haikyuu);\n  const [results, setResults] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n  const [school, setSchool] = useState(\"\");\n\n  const positions = [\"Wing Spiker\", \"Middle Blocker\", \"Libero\", \"Setter\"]\n\n  const handleInputChange = e => setSearch(e.target.value);\n\n  const filterByTag = e => setFilter(e.target.id);\n\n  useEffect(() => {\n    const searchResults = allCharacters.filter(character => \n      character.name.toLowerCase().includes(search)  \n    );\n    setResults(searchResults);\n  }, [search, allCharacters]);\n\n  useEffect(() => {\n    const filterResults = allCharacters.filter(character =>\n      character.position.includes(filter)\n    );\n    setResults(filterResults);\n  }, [filter, allCharacters]);\n\n  useEffect(() => {\n    const schoolResults = allCharacters.filter(character =>\n      character.school.includes(school));\n    setResults(schoolResults);\n  }, [school, allCharacters]);\n\n  return (\n    <div>\n      <section class=\"hero is-medium is-bold\">\n        <div class=\"hero-body\">\n          <div class=\"container\">\n            <h1 class=\"title\">\n              Haikyuu Characters!\n            </h1>\n            <div className=\"field\">\n              <div className=\"control\">\n                <input\n                  onChange={handleInputChange}\n                  name=\"search\"\n                  type=\"text\"\n                  className=\"input\"\n                  placeholder=\"Hinata Shoyo\"\n                  id=\"name\"\n                />\n              </div>\n              <br></br>\n              <div class=\"notification\">\n                <div class=\"subtitle\">\n                  <h2>Filter by Position</h2>\n                  <br></br>\n                  <div className=\"field is-grouped\">\n                    {positions.map(position => \n                    <div className=\"control\">\n                      <button className=\"button\" onClick={filterByTag} id={position}>{position}</button>\n                    </div>\n                    )}\n                    <button className=\"button\" onClick={filterByTag} id=\"\">Clear</button>\n                  </div>\n                </div>\n              </div>\n              <div class=\"notification\">\n                <div class=\"subtitle\">\n                  <h2>Filter by School</h2>\n                  <br></br>\n                  <div className=\"field is-grouped\">\n                    <div className=\"control\">\n                      <button className=\"button\" onClick={e => setSchool(\"Karasuno\")}>Karasuno</button>\n                    </div>\n                    <div className=\"control\">\n                      <button className=\"button\" onClick={e => setSchool(\"Fukurodani\")}>Fukurodani</button>\n                    </div>\n                    <div className=\"control\">\n                    <button className=\"button\" onClick={e => setSchool(\"\")}>Clear</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <div className=\"container\">\n        <div className=\"columns is-multiline\">\n        {results.length === 0 ? \n          allCharacters.map(character => (\n            <div className=\"column is-4\">\n              <Card\n              key={character.id}\n              name={character.name}\n              image={character.url}\n              position={character.position}\n              number={character.number}\n              height={character.height}\n              school={character.school} \n              />  \n            </div>\n            \n          ))\n          :\n          results.map(character => (\n            <div className=\"column is-4\">\n            <Card\n              key={character.id}\n              name={character.name}\n              image={character.url}\n              position={character.position}\n              number={character.number}\n              height={character.height}\n              school={character.school} \n            />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}