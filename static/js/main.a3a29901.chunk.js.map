{"version":3,"sources":["logo.svg","components/Wrapper/index.js","components/Title/index.js","components/Card/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","children","Title","Card","alt","name","src","image","position","number","height","school","SearchForm","value","search","onChange","handleInputChange","type","placeholder","id","onClick","handleFormSubmit","App","state","haikyuu","Search","this","map","character","key","url","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8oJAAAA,EAAOC,QAAU,IAA0B,kC,mJCM5BC,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAW,gBAAgBD,EAAME,WCMlCC,MAPf,SAAeH,GACX,OACI,yBAAKC,UAAU,8BACX,wBAAIA,UAAU,aAAaD,EAAME,YC0B9BE,MA7Bf,SAAcJ,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,gBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,SAErC,yBAAKP,UAAU,aACX,4BACI,4BACI,yCADJ,IAC4BD,EAAMM,MAElC,4BACI,6CADJ,IACgCN,EAAMS,UAEtC,4BACI,2CADJ,IAC8BT,EAAMU,QAEpC,4BACI,2CADJ,IAC8BV,EAAMW,OADpC,OAGA,4BACI,2CADJ,IAC8BX,EAAMY,YCCzCC,MArBf,SAAoBb,GAClB,OACE,0BAAMC,UAAU,eACd,yBAAKA,UAAU,mBACb,2BACEa,MAAOd,EAAMe,OACbC,SAAUhB,EAAMiB,kBAChBX,KAAK,SACLY,KAAK,OACLjB,UAAU,oBACVkB,YAAY,eACZC,GAAG,SAEL,4BAAQF,KAAK,SAASG,QAASrB,EAAMsB,iBAAkBrB,UAAU,wBAAjE,aCqBOsB,E,4MA3BbC,MAAQ,CACNC,W,uDAIA,OACE,6BACE,kBAAC,EAAD,4BACA,kBAAC,EAAD,KACE,kBAACC,EAAD,MACCC,KAAKH,MAAMC,QAAQG,KAAI,SAAAC,GAAS,OAC/B,kBAAC,EAAD,CACEC,IAAKD,EAAUT,GACfd,KAAMuB,EAAUvB,KAChBE,MAAOqB,EAAUE,IACjBtB,SAAUoB,EAAUpB,SACpBC,OAAQmB,EAAUnB,OAClBC,OAAQkB,EAAUlB,OAClBC,OAAQiB,EAAUjB,kB,GAnBdoB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3a29901.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Wrapper(props) {\n    return <div className =\"container-sm\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\n\nfunction Title(props) {\n    return (\n        <div className=\"jumbotron jumbrotron-fluid\">\n            <h1 className=\"display-4\">{props.children}</h1>\n        </div>)\n}\n\nexport default Title;","import React from \"react\";\n\nfunction Card(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"card-img-top\">\n                <img alt={props.name} src={props.image} />\n            </div>\n            <div className=\"card-body\">\n                <ul>\n                    <li>\n                        <strong>Name:</strong> {props.name}\n                    </li>\n                    <li>\n                        <strong>Position:</strong> {props.position}\n                    </li>\n                    <li>\n                        <strong>Number:</strong> {props.number}\n                    </li>\n                    <li>\n                        <strong>Height:</strong> {props.height} cm\n                    </li>\n                    <li>\n                        <strong>School:</strong> {props.school}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"form-inline\">\n      <div className=\"form-group mb-2\">\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control mb-2\"\n          placeholder=\"Hinata Shoyo\"\n          id=\"name\"\n        />\n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success mb-2\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport haikyuu from \"./haikyuu.json\";\nimport Wrapper from './components/Wrapper';\nimport Title from './components/Title';\nimport Card from './components/Card';\nimport SearchForm from './components/Search';\n\nclass App extends Component {\n  state = {\n    haikyuu\n  };\n\n  render() {\n    return (\n      <div>\n        <Title>Haikyuu Characters!</Title>\n        <Wrapper>\n          <SearchForm />\n          {this.state.haikyuu.map(character => (\n            <Card\n              key={character.id}\n              name={character.name}\n              image={character.url}\n              position={character.position}\n              number={character.number}\n              height={character.height}\n              school={character.school} \n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}